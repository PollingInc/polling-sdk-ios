#!/usr/bin/ruby

SANDBOXED = ENV['ENABLE_USER_SCRIPT_SANDBOXING']
PRODUCT_NAME = ENV['PRODUCT_NAME']
VER = ENV['PROJECT_VERSION']
CONFIG = ENV['CONFIGURATION']

if SANDBOXED == 'YES' then
  puts "note: ENABLE_USER_SCRIPT_SANDBOXING=#{SANDBOXED} and CONFIGURATION=#{CONFIG}"
  if CONFIG == 'RELEASE' then
    puts 'error: Sandboxing not supported for Release builds'
    exit 1
  end
end

ver_components = VER.split('.')

MAJOR = ver_components[0]
MINOR = ver_components[1] || '0'
PATCH = ver_components[2] || '0'

VER_LONG = "v#{VER}"

# NOTE: git commands will fail if sandboxing is enabled
if SANDBOXED != 'YES' then
  BRANCH = %x(git branch --show-current).strip
  COMMIT = %x(git rev-parse --short HEAD).strip

  VER_LONG << ":#{BRANCH}@#{COMMIT}"
  VER_LONG << ":#{CONFIG}"

  # not `git diff --quiet` because we consider the repo dirty if it
  # contains untracked files in addition to staged or unstated changes
  REPO_IS_DIRTY = %x(git status -s).length > 0
  if REPO_IS_DIRTY then
    REPO_STATE = 'dirty'
    VER_LONG << ":#{REPO_STATE}"
  else
    REPO_STATE = ''
  end
else
  BRANCH = ''
  COMMIT = ''
  REPO_STATE = ''
  VER_LONG << ":#{CONFIG}"
end

VER_ALL = "#{PRODUCT_NAME} #{VER_LONG}"


puts 'ARGS=' + ARGV.to_s

SCRIPT_INPUT_FILE = ARGV[0]
SCRIPT_OUTPUT_FILE_0 = ARGV[1]

puts 'SCRIPT_INPUT_FILE=' + SCRIPT_INPUT_FILE
puts 'SCRIPT_OUTPUT_FILE_0=' + SCRIPT_OUTPUT_FILE_0


if File.extname(SCRIPT_OUTPUT_FILE_0) == '.m' then
File.write(SCRIPT_OUTPUT_FILE_0,<<-EOF
/*
 *  POLVers.m
 *  Polling
 *
 *  Copyright Â© 2025 Polling.com. All rights reserved.
 *
 *  DO NOT EDIT THIS FILE
 *
 *  This file is generated automatically from the *.template_vers
 *  build rule.
 */

extern const short POLVersionMajorNumber;
extern const short POLVersionMinorNumber;
extern const short POLVersionPatchNumber;

extern const unsigned char POLVersionBranchString[];
extern const unsigned char POLVersionCommitString[];
extern const unsigned char POLVersionConfigString[];

extern const unsigned char POLVersionRepoStateString[];

extern const unsigned char POLVersionString[];
extern const unsigned char POLVersionLongString[];
extern const unsigned char POLVersionAllString[];

const short POLVersionMajorNumber __attribute__ ((used)) = #{MAJOR};
const short POLVersionMinorNumber __attribute__ ((used)) = #{MINOR};
const short POLVersionPatchNumber __attribute__ ((used)) = #{PATCH};

const unsigned char POLVersionBranchString[] __attribute__ ((used)) = "#{BRANCH}";
const unsigned char POLVersionCommitString[] __attribute__ ((used)) = "#{COMMIT}";
const unsigned char POLVersionConfigString[] __attribute__ ((used)) = "#{CONFIG}";
const unsigned char POLVersionRepoStateString[] __attribute__ ((used)) = "#{REPO_STATE}";

const unsigned char POLVersionString[] __attribute__ ((used)) = "#{VER}";
const unsigned char POLVersionLongString[] __attribute__ ((used)) = "#{VER_LONG}";
const unsigned char POLVersionAllString[] __attribute__ ((used)) = "#{VER_ALL}";

EOF
)
end
